---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Maqueta 3D">
    <!-- Preload de imágenes -->
    <link rel="preload" href="/09-01.jpg" as="image">
    <link rel="preload" href="/09-11.jpg" as="image">
    <link rel="preload" href="/09-21.jpg" as="image">
    <link rel="preload" href="/09-31.jpg" as="image">
    <link rel="preload" href="/10-01.jpg" as="image">
    <link rel="preload" href="/10-11.jpg" as="image">
    <link rel="preload" href="/10-21.jpg" as="image">
    <link rel="preload" href="/10-31.jpg" as="image">
    <link rel="preload" href="/11-01.jpg" as="image">
    <link rel="preload" href="/11-11.jpg" as="image">
    <link rel="preload" href="/11-21.jpg" as="image">
    <link rel="preload" href="/11-31.jpg" as="image">
    <main>
        <div class="tabs">
            <button class="tab-button selected">9</button>
            <button class="tab-button" >10</button>
            <button class="tab-button" >11</button>
        </div>
        <section>
            <div id="loading-indicator" class="loading">
                <div class="spinner"></div>
                <p>Cargando entorno 3D...</p>
            </div>
            <img id="maqueta-image" src="/09-01.jpg" alt="Maqueta 3D" style="display: none;">
            <div id="controls-container" class="controls-container" style="display: none;">
                <button id="prev-image-btn" aria-label="Anterior"></button>
                <button id="change-image-btn" aria-label="Siguiente"></button>
            </div>
        </section>
    </main>
</Layout>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const imageElement = document.getElementById('maqueta-image') as HTMLImageElement;
        const changeButton = document.getElementById('change-image-btn');
        const prevButton = document.getElementById('prev-image-btn');
        const loadingIndicator = document.getElementById('loading-indicator');
        const controlsContainer = document.getElementById('controls-container');
        
        // Matriz de imágenes: [planta][frame]
        const imageSequence = [
            ['/09-01.jpg', '/09-11.jpg', '/09-21.jpg', '/09-31.jpg'], // Planta 0
            ['/10-01.jpg', '/10-11.jpg', '/10-21.jpg', '/10-31.jpg'], // Planta 1
            ['/11-01.jpg', '/11-11.jpg', '/11-21.jpg', '/11-31.jpg']  // Planta 2
        ];
        
        let currentFloor = 0; // Planta actual (0, 1, 2)
        let currentFrame = 0; // Frame actual dentro de la planta (0, 1, 2, 3)
        let imagesLoaded = 0;
        const totalImages = imageSequence.flat().length;
        
        // Función para actualizar la imagen mostrada
        function updateImage() {
            imageElement.src = imageSequence[currentFloor][currentFrame];
        }
        
        // Función para avanzar al siguiente frame
        function nextFrame() {
            currentFrame = (currentFrame + 1) % imageSequence[currentFloor].length;
            updateImage();
        }
        
        // Función para retroceder al frame anterior
        function prevFrame() {
            currentFrame = (currentFrame - 1 + imageSequence[currentFloor].length) % imageSequence[currentFloor].length;
            updateImage();
        }
        
        // Función para cambiar de planta
        function changeFloor(floor) {
            currentFloor = floor;
            // Mantener el currentFrame actual, no resetear
            updateImage();
        }
        
        // Función para precargar imágenes
        function preloadImages() {
            imageSequence.flat().forEach((src, index) => {
                const img = new Image();
                img.onload = function() {
                    imagesLoaded++;
                    if (imagesLoaded === totalImages) {
                        // Todas las imágenes están cargadas
                        loadingIndicator.style.display = 'none';
                        imageElement.style.display = 'block';
                        controlsContainer.style.display = 'flex';
                        
                        // Mostrar la primera imagen
                        updateImage();
                    }
                };
                img.onerror = function() {
                    console.error(`Error al cargar la imagen: ${src}`);
                    imagesLoaded++;
                    if (imagesLoaded === totalImages) {
                        loadingIndicator.style.display = 'none';
                        imageElement.style.display = 'block';
                        controlsContainer.style.display = 'flex';
                        
                        // Mostrar la primera imagen
                        updateImage();
                    }
                };
                img.src = src;
            });
        }
        
        // Iniciar preload
        preloadImages();
        
        // Event listeners para los botones de planta (tabs)
        document.querySelectorAll('.tab-button').forEach((button, index) => {
            button.addEventListener('click', function() {
                changeFloor(index);
                
                // Actualizar botón activo
                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('selected'));
                this.classList.add('selected');
            });
        });
        
        // Event listener para el botón de avanzar
        changeButton.addEventListener('click', function() {
            nextFrame();
        });
        
        // Event listener para el botón de retroceder
        prevButton.addEventListener('click', function() {
            prevFrame();
        });
    });
</script>



<style>
    body {
        overflow: hidden;
    }
    h1 {
        font-size: 4rem;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        margin: 0;
        padding: 0;
    }
    .tabs {
        display: flex;
        justify-content: center;
        margin-bottom: 16px;
    }
    .tab-button {
        width: 80px;
        padding: 12px 24px;
        border: none;
        background-color: hsl(240, 15%, 27%);
        color: hsl(240, 15%, 97%);
        cursor: pointer;
        font-size: 16px;
        border-radius: 4px;
        margin: 4px 1px;
        transition: background-color 0.3s;
    }
    .tab-button.selected {
        background-color: hsl(230, 100%, 69%);
    }
    .tab-button:hover {
        background-color: hsl(230, 100%, 75%);
    }
    
    .loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: #333;
        font-size: 18px;
    }
    
    /* Contenedor de controles con flexbox */
    .controls-container {
        position: relative;
        bottom: 30px;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 40px;
        z-index: 20;
    }
    
    /* Botones de rotación */
    #prev-image-btn,
    #change-image-btn {
        width: 60px;
        height: 60px;
        border: none;
        border-radius: 50%;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        cursor: pointer;
        font-size: 24px;
        font-weight: bold;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        backdrop-filter: blur(5px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    
    #prev-image-btn:hover,
    #change-image-btn:hover {
        background: rgba(0, 0, 0, 0.9);
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
    }
    
    /* Iconos de flechas curvas */
    #prev-image-btn::after {
        content: "↺";
        font-size: 28px;
        transform: scaleX(-1);
    }
    
    #change-image-btn::after {
        content: "↻";
        font-size: 28px;
        transform: scaleX(-1);
    }
    
    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    section {
        background-color: hsl(240, 15%, 17%);
        height: calc(100vh - 48px);
        margin: 24px;
        border-radius: 13px;
        background-position: 50% 70%;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    .imageWrapper3D {
        position: relative;
        max-height: calc(100vh - 48px);
        aspect-ratio: 16 / 9;
    }
    #maqueta-image {
        max-width: 100%;
        max-height: 100%;
        border-radius: 12px;
        aspect-ratio: 16 / 9;
    }
    .image-area {
        position: absolute;
        left: 0;
        top: 0;
    }
    .toprow {
        fill: #75A93A;
        cursor: pointer;
        stroke: white;
        stroke-width: 4;
        z-index: 9;
        fill-opacity: 0;
    }
    .secondrow {
        fill: #75A93A;
        fill-opacity: 0.4;
        cursor: pointer;
    }
    .toprow:hover {
        fill-opacity: 0.4;
    }
    .secondrow:hover {
        fill-opacity: 0.6;
    }
    dialog {
        height: calc(100vh - 16px);
        border: none;
    }
    dialog::backdrop {
        background-color: #26263399;
    }
    .outline {
        fill: none;
        stroke: white;
        stroke-width: .2;
    }
    .svg-text {
        fill: #a93a75;
        font: bold 5rem "Poppins", sans-serif;
        pointer-events: none;
        display: block;
    }
    .svg-number {
        display: none;
        fill: #a93a75;
        font: bold 7rem "Poppins", sans-serif;
        z-index: 9;
    }
    .modal {
        width: fit-content;
        height: fit-content;
        border-radius: 12px;
        overflow: hidden;
        outline: none;
        background-color: white;
    }
    .modalImage {
        border-radius: 8px;
        max-width: 80vw;
        max-height: 80vh;
    }
    .layama {
        width: auto;
        height: 80vh;
        aspect-ratio: auto;
        max-width: 80vw;
    }
    .closeButton {
        display: flex;
        justify-content: center;
        align-items: center;
        position: fixed;
        top: 8px;
        right: 8px;
        height: 48px;
        width: 48px;
        outline: none;
        background-color: hsl(240, 15%, 27%);
        color: hsl(240, 15%, 97%);
        cursor: pointer;
        font-size: 16pt;
        border: 2px hsl(240, 15%, 27%) solid;
        border-radius: 250px;
        text-align: center;
    }
    main {
        height: calc(100dvh - 80px);
    }
    ul {
        list-style-type: none;
        width: 100%;
        padding: 0;
        display: flex;
        flex-direction: column;
        gap: 16px;
    }
    .mobile-text {
        color: white;
        display: none;
        width: 100%;
    }
    .mobile-text li {
        display: flex;
        justify-content: space-between;
        padding-top: 8px;
        padding-bottom: 8px;
        padding-inline: 8px;
    }
    .mobile-text span {
        cursor: pointer;
    }
    .texto-3d-impar {
        background-color: hsl(240, 15%, 37%);
    }
    @media (orientation: portrait) {
        .svg-number {
            display: block;
            pointer-events: none;
        }
        .layama {
            border-radius: 12px;
            border: solid 8px white;
            max-width: 90vw;
        }
        .svg-text {
            display: none;
        }
        .mobile-text {
            display: flex;
        }
        section {
            height: auto;
            width: 100%;
            margin: 0;
        }
        .modal {
            padding: 0;
            max-height: calc(100vh - 80px);
        }
        .modalImage {
            margin: 0;
            border: 15px solid white;
            
        }
        .mobile-text-list {
            display: flex;
            flex-direction: column;
            gap: 0px;
            margin-bottom: 40px;
        }
        .mobile-text-list li {
            padding-top: 8px;
            padding-bottom: 8px;
            padding-inline: 8px;
        }
        main {
            height: calc(100dvh - 80px);
            overflow: scroll;
        }
        /* Responsive mobile para botones con flexbox */
        .controls-container {
            bottom: 20px;
            gap: 30px;
        }
        
        #prev-image-btn,
        #change-image-btn {
            width: 50px;
            height: 50px;
            font-size: 20px;
        }
        
        #prev-image-btn::after {
            font-size: 24px;
        }
        
        #change-image-btn::after {
            font-size: 24px;
        }
        
        .closeButton {
            display: flex;
            align-items: center;
            justify-content: center;
        }
    }
</style>